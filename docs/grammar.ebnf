rule SourceUnit ::=
    SourceUnitPart *  
  ;

rule SourceUnitPart ::=
    ContractDefinition 
  | ImportDirective 
  ;

rule ImportDirective ::=
     'import' StringLiteral  ';' 
  |  'import' StringLiteral  'as' Identifier  ';' 
  ;

rule Type ::=
     'bool' 
  |  'field' 
  |  'u32' 
  |  'u64' 
  |  'u256' 
  ;

rule IdentifierOrError ::=
    Identifier 
  | 
  ;

rule VariableDeclaration ::=
    Precedence0 IdentifierOrError 
  ;

rule StructDefinition ::=
     'struct' IdentifierOrError  '{' ( VariableDeclaration  ';' ) *   '}' 
  ;

rule ContractPart ::=
    StructDefinition 
  | EnumDefinition 
  | VariableDefinition 
  | FunctionDefinition 
  | TypeDefinition 
  |  ';' 
  ;

rule ContractDefinition ::=
     'contract' IdentifierOrError  '{' ( ContractPart ) *   '}' 
  ;

rule EnumDefinition ::=
     'enum' IdentifierOrError  '{' Comma!(IdentifierOrError)  '}' 
  ;

rule VariableDefinition ::=
    Precedence0 VariableAttribute *  IdentifierOrError (  '=' Expression ) ?   ';' 
  | Precedence0 VariableAttribute *  Identifier  ';' 
  ;

rule TypeDefinition ::=
     'type' Identifier  '=' Precedence0  ';' 
  ;

rule VariableAttribute ::=
     'const' 
  |  'mut' 
  ;

rule Expression ::=
    Precedence14 
  ;

rule Precedence14 ::=
    Precedence13  '=' Precedence14 
  | Precedence13  '|=' Precedence14 
  | Precedence13  '^=' Precedence14 
  | Precedence13  '&=' Precedence14 
  | Precedence13  '<<=' Precedence14 
  | Precedence13  '>>=' Precedence14 
  | Precedence13  '+=' Precedence14 
  | Precedence13  '-=' Precedence14 
  | Precedence13  '*=' Precedence14 
  | Precedence13  '/=' Precedence14 
  | Precedence13  '%=' Precedence14 
  | Precedence13  '?' Precedence14  ':' Precedence14 
  | Precedence13 
  ;

rule Precedence13 ::=
    Precedence13  '||' Precedence12 
  | Precedence12 
  ;

rule Precedence12 ::=
    Precedence12  '&&' Precedence11 
  | Precedence11 
  ;

rule Precedence11 ::=
    Precedence11  '==' Precedence10 
  | Precedence11  '!=' Precedence10 
  | Precedence10 
  ;

rule Precedence10 ::=
    Precedence10  '<' Precedence9 
  | Precedence10  '>' Precedence9 
  | Precedence10  '<=' Precedence9 
  | Precedence10  '>=' Precedence9 
  | Precedence9 
  ;

rule Precedence9 ::=
    Precedence9  '|' Precedence8 
  | Precedence8 
  ;

rule Precedence8 ::=
    Precedence8  '^' Precedence7 
  | Precedence7 
  ;

rule Precedence7 ::=
    Precedence7  '&' Precedence6 
  | Precedence6 
  ;

rule Precedence6 ::=
    Precedence6  '<<' Precedence5 
  | Precedence6  '>>' Precedence5 
  | Precedence5 
  ;

rule Precedence5 ::=
    Precedence5  '+' Precedence4 
  | Precedence5  '-' Precedence4 
  | Precedence4 
  ;

rule Precedence4 ::=
    Precedence4  '*' Precedence3 
  | Precedence4  '/' Precedence3 
  | Precedence4  '%' Precedence3 
  | Precedence3 
  ;

rule Precedence3 ::=
    Precedence2  '**' Precedence3 
  | Precedence2 
  ;

rule Precedence2 ::=
     '!' Precedence2 
  |  '~' Precedence2 
  | Precedence0 
  ;

rule NamedArgument ::=
    Identifier  ':' Expression 
  ;

rule FunctionCall ::=
    Precedence0  '(' Comma!(Expression)  ')' 
  | Precedence0  '('  '{' Comma!(NamedArgument)  '}'  ')' 
  ;

rule Precedence0 ::=
    Precedence0  '++' 
  | Precedence0  '--' 
  | FunctionCall 
  | Precedence0  '[' Expression ?   ']' 
  | Precedence0  '[' Expression ?   ':' Expression ?   ']' 
  | Precedence0  '.' Identifier 
  | Type 
  |  '[' CommaOne!(Expression)  ']' 
  | Identifier 
  | ParameterList 
  | LiteralExpression 
  ;

rule LiteralExpression ::=
     'true' 
  |  'false' 
  | Number 
  ;

rule Parameter ::=
    Expression Identifier ?  
  ;

rule OptParameter ::=
    Parameter ?  
  ;

rule ParameterList ::=
     '('  ')' 
  |  '(' Parameter  ')' 
  |  '(' CommaTwo!(OptParameter)  ')' 
  |  '('  ')' 
  ;

rule BlockStatementOrSemiColon ::=
     ';' 
  | BlockStatement 
  ;

rule FunctionDefinition ::=
     'fn' IdentifierOrError ParameterList (  '->' ParameterList ) ?  BlockStatementOrSemiColon 
  ;

rule BlockStatement ::=
     '{' Statement *   '}' 
  ;

rule OpenStatement ::=
     'if'  '(' Expression  ')' Statement 
  |  'if'  '(' Expression  ')' ClosedStatement  'else' OpenStatement 
  |  'for'  '(' SimpleStatement ?   ';' Expression ?   ';' SimpleStatement ?   ')' OpenStatement 
  ;

rule ClosedStatement ::=
    NonIfStatement 
  |  'if'  '(' Expression  ')' ClosedStatement  'else' ClosedStatement 
  |  'for'  '(' SimpleStatement ?   ';' Expression ?   ';' SimpleStatement ?   ')' ClosedStatement 
  |  'for'  '(' SimpleStatement ?   ';' Expression ?   ';' SimpleStatement ?   ')'  ';' 
  ;

rule Statement ::=
    OpenStatement 
  | ClosedStatement 
  | 
  ;

rule SimpleStatement ::=
    VariableDeclaration (  '=' Expression ) ?  
  | Expression 
  ;

rule NonIfStatement ::=
    BlockStatement 
  | SimpleStatement  ';' 
  |  'continue'  ';' 
  |  'break'  ';' 
  |  'return'  ';' 
  |  'return' Expression  ';' 
  ;

macro Comma<T> ::=
    
  | CommaOne!(T) 
  ;

macro CommaOne<T> ::=
    T (  ',' T ) *  
  ;

macro CommaTwo<T> ::=
    T (  ',' T ) +  
  ;

rule Number ::=
     'r#([1-9][0-9]*|0)(u|ll|l)?#' 
  |  'r#0x[0-9A-Fa-f]*(u|ll|l)?#' 
  ;

rule Identifier ::=
     'r#[$_]*[a-zA-Z][a-zA-Z$_0-9]*#' 
  ;

rule StringLiteral ::=
     'r#\\[^\\]*\\#' 
  ;

